USAGE:

  sexpect [OPTION] [SUB-COMMAND]

DESCRIPTION:

  Yet Another Expect ('s' is for either simple, super or shell)

  Unlike Expect (Tcl), Expect.pm (Perl), Pexpect (Python) or other similar
  Expect implementations, 'sexpect' is not bound to any specific programming
  language so it can be used with any languages which support running external
  commands.

  Another interesting 'sexpect' feature is that the spawned child process is
  running in background. You can attach to and detach from it as needed.

GLOBAL OPTIONS:

  -debug | -d
        Debug mode. The server will run in foreground.

  -help | --help | -h

  -sock SOCKFILE | -s SOCKFILE
        The socket file used for client/server communication. This option is
        required for most sub-commands.

        You can set the SEXPECT_SOCKFILE environment variable so you don't
        need to specify '-sock' for each command.

        The socket file will be automatically created if it does not exist.

  -version | --version

ENVIRONMENT VARIABLES:

  SEXPECT_SOCKFILE
        The same as global option '-sock' but has lower precedence.

SUB-COMMANDS:
=============

spawn (sp)
----------

  USAGE:
    spawn [OPTION] COMMAND...

  DESCRIPTION:
    The 'spawn' command will first make itself run as a background server. Then
    the server will start the specified COMMAND on a new allocated pty. The
    server will continue running until the child process exits and is waited.

  OPTIONS:
    -append
        See option '-logfile'.

    -autowait | -nowait
        Turn on 'autowait' which by default is off. See sub-command 'set' for
        more information.

    -close-on-exit | -cloexit
        Close the pty after the child process has exited even if the child's
        child processes are still opening the pty. (Example: 'ssh -f')

    -discard
        Turn on 'discard' which by default is off. See sub-command 'set' for
        more information.

    -idle-close N | -idle N
        The background server process will close the PTY and exit if there are
        no client requests in the last N seconds. Usually this would cause the
        spawned process to receive SIGHUP and be killed.

    -logfile FILE | -logf FILE | -log FILE
        All output from the child process will be copied to the log file.
        By default the log file will be overwritten. Use '-append' if you want
        to append to it.

    -nohup
        Make the spawned child process ignore SIGHUP.

    -term TERM | -T TERM
        Set the env var TERM for the child process.

    -timeout N | -t N
        Set the default timeout for the 'expect' command. A negative value means
        no timeout. The default value is -1.

    -ttl N
        The background server process will close the PTY and exit N seconds
        after the child process is spawned. Usually this would cause the child
        to receive SIGHUP and be killed.

expect (exp, ex, x)
-------------------

  USAGE
    expect [OPTION] [-exact] PATTERN
    expect [OPTION] -glob PATTERN
    expect [OPTION] -re PATTERN
    expect [OPTION] -eof
    expect

  DESCRIPTION
    Only one of '-exact', '-glob', '-re' or '-eof' options can be specified.
    If none of them is specified then it defaults to

        expect -timeout 0 -re '.*'

  OPTIONS
    -cstring | -cstr | -c
        C style backslash escapes would be recognized and replaced in PATTERN.
        See 'send' for more information.

    -eof
        Wait until EOF from the child process.

    -exact PATTERN | -ex PATTERN
        Handle PATTERN as an 'exact' string.

    -glob PATTERN | -gl PATTERN
        Expect the GLOB style PATTERN.

        For convenience, the GLOB patterns also support ^ and $ which match
        the beginning and end of strings.

    -lookback N | -lb N
        Show the most recent last N lines of output so you'd know where you
        were last time.

    -nocase, -icase, -i
        Ignore case. Used with '-exact', '-glob' or '-re'.

    -re PATTERN
        Expect the ERE (extended RE) PATTERN.

    -timeout N | -t N
        Override the default timeout (see 'spawn -timeout').

  EXIT:
    0 will be returned if the match succeeds before timeout or EOF.

    If the command fails, 'chkerr' can be used to check if the failure is
    caused by EOF or TIMEOUT. For example (with Bash):

        sexpect expect -re foobar
        ret=$?
        if [[ $ret == 0 ]]; then
            # Cool we got the expected output
        elif sexpect chkerr -errno $ret -is eof; then
            # EOF from the child (most probably dead)
        elif sexpect chkerr -errno $ret -is timeout; then
            # Timed out waiting for the expected output
        else
            # Other errors
        fi

send (s)
--------

  USAGE:
    send [OPTION] [--] STRING

  DESCRIPTION:

  OPTIONS:
    -cstring | -cstr | -c
        C style backslash escapes would be recognized and replaced before
        sending to the server.

        The following standard C escapes are supported:

            \\ \a \b \f \n \r \t \v
            \xHH \xH
            \o \ooo \ooo

        Other supported escapes:

            \e \E : ESC, the escape char.
            \cX   : CTRL-X, e.g. \cc will be converted to the CTRL-C char.

    -enter | -cr
        Append ENTER (\r) to the specified STRING before sending to the server.

    -file FILE | -f FILE
        Send the content of the FILE to the server.

    -env NAME | -var NAME
        Send the value of env var NAME to the server.


interact (i)
------------

  USAGE:
    interact [OPTION]

  DESCRIPTION:
    'interact' is used to attach to the child process and manually interact
    with it. To detach from the child, press CTRL-] .

    'interact' would fail if it's not running on a tty/pty.

    If the child process exits when you're interacting with it then 'interact'
    will exit with the same exit code of the child process and you don't need
    to call the 'wait' command any more. And the background server will also
    exit.

  OPTIONS:
    -lookback N | -lb N
        Show the most recent last N lines of output after 'interact' so you'd
        know where you were last time.

wait (w)
--------

  USAGE:
    wait

  DESCRIPTION:
    'wait' waits for the child process to complete and 'wait' will exit with
    same exit code as the child process.

expect_out (expout, out)
------------------------

  USAGE:
    expect_out [-index N]

  DESCRIPTION:
    After a successful 'expect -re PATTERN', you can use 'expect_out' to get
    substring matches. Up to 9 (1-9) RE substring matches are saved in the
    server side. 0 refers to the string which matched the whole PATTERN.

    For example, if the command

        sexpect expect -re 'a(bc)d(ef)g'

    succeeds (exits 0) then the following commands

        sexpect expect_out -index 0
        sexpect expect_out -index 1
        sexpect expect_out -index 2

    would output 'abcdefg', 'bc' and 'ef', respectively.

  OPTIONS:
    -index N | -i N
        N can be 0-9. The default is 0.

chkerr (chk, ck)
----------------

  USAGE:
    chkerr -errno NUM -is REASON

  DESCRIPTION:
    If the previous 'expect' command fails, 'chkerr' can be used to check if
    the failure is caused by EOF or TIMEOUT.

    See 'expect' for an example.

  OPTIONS:
    -errno NUM | -err NUM | -no NUM
        NUM is the exit code of the previous failed 'expect' command.

    -is REASON
        REASON can be 'eof', 'timeout'.

  EXIT:
    0 will be exited if the specified error NUM is caused by the REASON.
    1 will be exited if the specified error NUM is NOT caused by the REASON.

close (c)
---------

  USAGE:
    close

  DESCRIPTION:
    Close the child process's pty by force. This would usually cause the child
    to receive SIGHUP and be killed.

kill (k)
--------

  USAGE:
    kill -NAME
    kill -NUM

  DESCRIPTION:
    Send the specified signal to the child process.

  OPTIONS:
    -SIGNAME
        Specify the signal with name. The following signal names are
        supported:

            SIGCONT SIGHUP  SIGINT  SIGKILL SIGQUIT
            SIGSTOP SIGTERM SIGUSR1 SIGUSR2

        The SIGNAME is case insensitive and the prefix 'SIG' is optional.

    -SIGNUM
        Specify the signal with number.

set
----

  USAGE:
    set [OPTION]

  DESCRIPTION:
    The 'set' sub-command can be used to dynamically change server side's
    parameters after 'spawn'.

  OPTIONS:
    -autowait FLAG | -nowait FLAG
        FLAG can be 0, 1, on, off.

        By default, after the child process exits, the server side will wait
        for the client to call 'wait' to get the exit status of the child and
        then the server will exit.

        When 'autowait' is turned on, after the child process exits it'll
        be automatically waited and then the server will exit.

    -discard FLAG
        FLAG can be 0, 1, on, off.

        By default, the child process will be blocked if it outputs too much
        and the client (either 'expect', 'interact' or 'wait') does not read
        the output in time.

        When 'discard' is turned on, the output from the child will be silently
        discarded so the child can continue running without being blocked.

    -idle-close N | -idle N
        Set the IDLE value. See 'spawn' for details.

    -timeout N | -t N
        See 'spawn'.

    -ttl N
        See 'spawn'.

get
----

  USAGE:
    get [OPTION]

  DESCRIPTION:
    Retrieve server side information.

  OPTIONS:
    -all | -a
        Get all supported information from server side.

    -autowait | -nowait
        Get the 'autowait' flag.

    -discard
        Get the 'discard' flag.

    -idle-close | -idle
        Get the IDLE value. See 'spawn' for details.

    -pid
        Get the child process's PID.

    -ppid
        Get the child process's PPID (the server's PID).

    -tty | -pty | -pts
        Get the child process's tty.

    -timeout | -t
        Get the current default timeout value.

    -ttl
        Get the TTL value. See 'spawn' for details.

BUGS:
  Report bugs to Clark Wang <dearvoid @ gmail.com> or
  https://github.com/clarkwang/sexpect
